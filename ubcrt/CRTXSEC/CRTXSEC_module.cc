////////////////////////////////////////////////////////////////////////
// Class:       CRTXSEC
// Module Type: analyzer
// File:        CRTXSEC_module.cc
//
// Generated at Tue Nov 20 06:00:19 2018 by David Lorca galindo using artmod
// from cetpkgsupport v1_14_01.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDAnalyzer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "canvas/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"
#include "art/Framework/Services/Optional/TFileService.h"

#include "canvas/Persistency/Common/Ptr.h"
#include "canvas/Persistency/Common/Assns.h"
#include "canvas/Persistency/Provenance/ProductID.h"
#include "art/Persistency/Common/PtrMaker.h"
#include "canvas/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"


// data-products                                                                         
#include "lardataobj/RecoBase/Track.h"
#include "lardataobj/RecoBase/Hit.h"
#include "lardataobj/AnalysisBase/T0.h"
#include "lardataobj/AnalysisBase/CosmicTag.h"
#include "lardataobj/AnalysisBase/Calorimetry.h"
#include "lardataobj/MCBase/MCTrack.h"
#include "lardataobj/RecoBase/OpFlash.h"
#include "lardata/Utilities/AssociationUtil.h"

//CRT data-products
#include "ubobj/CRT/CRTHit.hh"
#include "ubobj/CRT/CRTTrack.hh"
#include "ubcrt/CRT/CRTAuxFunctions.hh"
#include "ubobj/RawData/DAQHeaderTimeUBooNE.h"

//Root                                                                                                               
#include "TTree.h"
#include "TH1F.h"
#include "TH2F.h"
#include "TH3S.h"
#include "TProfile.h"
#include "TF1.h"
#include "TDatime.h"
#include <iostream>
#include <stdio.h>
#include <sstream>
#include <vector>
#include <map>
#include <utility>
#include <typeinfo>
#include <memory>


namespace crt {
  class CRTXSEC;
}

class crt::CRTXSEC : public art::EDAnalyzer {
public:
  explicit CRTXSEC(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  CRTXSEC(CRTXSEC const &) = delete;
  CRTXSEC(CRTXSEC &&) = delete;
  CRTXSEC & operator = (CRTXSEC const &) = delete;
  CRTXSEC & operator = (CRTXSEC &&) = delete;

  // Required functions.
  void analyze(art::Event const & e) override;

  // Selected optional functions.
  void beginJob() override;
  void endJob() override;

private:

  // Declare member data here.
  art::ServiceHandle<art::TFileService> tfs;

  std::string  data_labelCRThit_;

  int verbose_;

};


crt::CRTXSEC::CRTXSEC(fhicl::ParameterSet const & p)
  :
  EDAnalyzer(p),
  data_labelCRThit_(p.get<std::string>("data_labelCRThit")),
  verbose_(p.get<int>("verbose"))  // ,
 // More initializers here.
{}

void crt::CRTXSEC::analyze(art::Event const & evt)
{
  // Implementation of required member function here.

  //get CRTHits                                                              
  art::Handle< std::vector<crt::CRTHit> > rawHandle_CRThit;
  evt.getByLabel(data_labelCRThit_, rawHandle_CRThit); //                                                                                                       //check to make sure the data we asked for is valid                                                                                                
  if(!rawHandle_CRThit.isValid()){
    std::cout << "Run " << evt.run() << ", subrun " << evt.subRun()
              << ", event " << evt.event() << " has zero"
              << " CRTHits " << " in module " << data_labelCRThit_ << std::endl;
    std::cout << std::endl;
    return;
  }
  
  //get better access to the data                                                                                                         
  std::vector<crt::CRTHit> const& CRTHitCollection(*rawHandle_CRThit);
  if(verbose_!=0){
    std::cout<<"  CRTHitCollection.size()  "<<CRTHitCollection.size()<<std::endl;
    //  getchar();                                                                                                                  
  }
  //get CRTHits 


  for(std::vector<int>::size_type i = 0; i != CRTHitCollection.size(); i++) {//A
    
    crt::CRTHit myCRTHit = CRTHitCollection[i];

    std::cout<<myCRTHit.x_pos<<std::endl;
    
  }//A

}

void crt::CRTXSEC::beginJob()
{
  // Implementation of optional member function here.
}

void crt::CRTXSEC::endJob()
{
  // Implementation of optional member function here.
}

DEFINE_ART_MODULE(crt::CRTXSEC)
