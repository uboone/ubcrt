////////////////////////////////////////////////////////////////////////
// Class:       T0recoCRTHitAnal
// Module Type: analyzer
// File:        T0recoCRTHitAnal_module.cc
//
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDAnalyzer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "canvas/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"

#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"
#include "art/Framework/Services/Optional/TFileService.h"

//data-products
#include "lardataobj/RecoBase/Track.h"
#include "lardataobj/RecoBase/Hit.h"
#include "lardataobj/AnalysisBase/T0.h"
#include "lardataobj/AnalysisBase/CosmicTag.h"
#include "lardataobj/AnalysisBase/Calorimetry.h"
#include "lardataobj/MCBase/MCTrack.h"
#include "lardataobj/RecoBase/OpFlash.h"
#include "lardata/Utilities/AssociationUtil.h"

//CRT data-products                                                              
#include "ubobj/CRT/CRTHit.hh"
#include "ubobj/CRT/CRTTrack.hh"
#include "ubcrt/CRT/CRTAuxFunctions.hh"
#include "ubobj/RawData/DAQHeaderTimeUBooNE.h"

//Root
#include "TTree.h"
#include "TH1F.h"
#include "TH2F.h"
#include "TH3S.h"
#include "TProfile.h"
#include "TF1.h"
#include "TDatime.h"
#include <iostream>
#include <stdio.h>
#include <sstream>
#include <vector>
#include <map>
#include <utility>
#include <typeinfo>

#include <memory>

namespace crt {
  class T0recoCRTHitAnal;
}

class crt::T0recoCRTHitAnal : public art::EDAnalyzer {
public:
  explicit T0recoCRTHitAnal(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  T0recoCRTHitAnal(T0recoCRTHitAnal const &) = delete;
  T0recoCRTHitAnal(T0recoCRTHitAnal &&) = delete;
  T0recoCRTHitAnal & operator = (T0recoCRTHitAnal const &) = delete;
  T0recoCRTHitAnal & operator = (T0recoCRTHitAnal &&) = delete;

  // Required functions.
  void analyze(art::Event const & e) override;

  // Selected optional functions.
  void beginJob() override;
  void endJob() override;

  void SortTrackPoints (const recob::Track& track, std::vector<TVector3>& sorted_trk);

private:

  // Declare member data here.
  art::ServiceHandle<art::TFileService> tfs;

  std::string  data_label_TPCTrack_;
  std::string  data_label_T0reco_;
  bool fverbose;
  bool fIsMC;
  
  TH1F* hDiffT_CRT_T0;
  TH1F* hDiffT_CRT_T0Flash;
  TH1F* hDiffT_T0Flash;
  TH1F* hGeoMatch;
  TH1F* hTrackTheta;
  TH1F* hTrackPhi;
  TH1F* hMTheta;
  TH1F* hMPhi;
  TH1F* hTime;


};


crt::T0recoCRTHitAnal::T0recoCRTHitAnal(fhicl::ParameterSet const & p)
  :
  EDAnalyzer(p),
  // data_labelCRThit_(p.get<std::string>("data_labelCRThit")),
  // data_label_flash_(p.get<std::string>("data_label_flash_")),
  // data_label_DAQHeader_(p.get<std::string>("data_label_DAQHeader_")),
  data_label_TPCTrack_(p.get<std::string>("data_label_TPCTrack_")),
  data_label_T0reco_(p.get<std::string>("data_label_T0reco_")),
  fIsMC(p.get<bool>("IsMC")),
  fverbose(p.get<bool>("verbose"))  // ,
 // More initializers here.
{}

void crt::T0recoCRTHitAnal::analyze(art::Event const & evt)
{


  if (fIsMC) std::cout << "this is monte carlo" << std::endl;
  
  //get TPC Tracks  
  art::Handle< std::vector<recob::Track> > rawHandle_TPCtrack;
  evt.getByLabel(data_label_TPCTrack_, rawHandle_TPCtrack);
  //check to make sure the data we asked for is valid                                                                                                         
  if(!rawHandle_TPCtrack.isValid()){
    std::cout << "Run " << evt.run() << ", subrun " << evt.subRun()
              << ", event " << evt.event() << " has zero"
              << " recob::Track " << " in module " << data_label_TPCTrack_ << std::endl;
    std::cout << std::endl;
    return;
  }
  //get better access to the data	    
  
  std::vector<recob::Track> const& TPCTrackCollection(*rawHandle_TPCtrack);
  if(fverbose){
    std::cout<<"  TPCTrackCollection.size()  "<<TPCTrackCollection.size()<<std::endl;
    
  }
  //get TPCTracks                                                                                                                                               
  /*  

  //get Optical Flash			   
  
  art::Handle< std::vector<recob::OpFlash> > rawHandle_OpFlash;
  evt.getByLabel(data_label_flash_, rawHandle_OpFlash);
  std::vector<recob::OpFlash> const& OpFlashCollection(*rawHandle_OpFlash);
  if(fverbose){
    std::cout<<"  OpFlashCollection.size()  "<<OpFlashCollection.size()<<std::endl;
  }
  //get Optical Flash 
  
  */
  // //get CRTHits				   
  // art::Handle< std::vector<crt::CRTHit> > rawHandle_CRThit;
  // evt.getByLabel(data_labelCRThit_, rawHandle_CRThit); //                                                                                                       
  // //check to make sure the data we asked for is valid	
  
  // if(!rawHandle_CRThit.isValid()){
  //   std::cout << "Run " << evt.run() << ", subrun " << evt.subRun()
  //             << ", event " << evt.event() << " has zero"
  //             << " CRTHits " << " in module " << data_labelCRThit_ << std::endl;
  //   std::cout << std::endl;
  //   return;
  // }
  
  // //get better access to the data      
  
  // std::vector<crt::CRTHit> const& CRTHitCollection(*rawHandle_CRThit);
  // if(verbose_!=0){
  //   std::cout<<"  CRTHitCollection.size()  "<<CRTHitCollection.size()<<std::endl;
  //   //  getchar();			  
  // }
  // //get CRTHits                                                                                                                                                 
  
// grab T0 objects associated with tracks    
  art::FindMany<anab::T0> trk_t0_assn_v(rawHandle_TPCtrack, evt, data_label_T0reco_); //objeto, evento, label
  
  //  art::FindMany<recob::OpFlash> trk_flash_assn_v(trackListHandle, evt,  fT0recoModuleLabel );


  // grab flashes associated with tracks 
  //  art::FindMany<recob::OpFlash> trk_flash_assn_v(rawHandle_TPCtrack, evt, data_label_T0reco_ );
  
    for(std::vector<int>::size_type i = 0; i != TPCTrackCollection.size(); i++) {                                  
      
      recob::Track my_TPCTrack = TPCTrackCollection[i];
      
      const std::vector<const anab::T0*>& T0_v = trk_t0_assn_v.at(i);
      //      const std::vector<const recob::OpFlash*>& flash_v = trk_flash_assn_v.at(trkIter);
                 
      hTrackTheta->Fill(my_TPCTrack.Theta());
      hTrackPhi->Fill(my_TPCTrack.Phi());

      double tracktime=0.0;
      if (T0_v.size() == 1){
	auto t0 = T0_v.at(0);
	tracktime = 1000.0*(t0->Time());
	hMTheta->Fill(my_TPCTrack.Theta());
	hMPhi->Fill(my_TPCTrack.Phi());
	hTime->Fill(tracktime);
	if (fverbose) std::cout << "time found " << std::endl;
      }

	

    }



}

void crt::T0recoCRTHitAnal::beginJob()
{

  hDiffT_CRT_T0 = tfs->make<TH1F>("hDiffT_CRT_T0","hDiffT_CRT_T0",5000,-20000,20000);
  hDiffT_CRT_T0->GetXaxis()->SetTitle("T0Time - CRTTrack_Time (ns)");
  hDiffT_CRT_T0->GetYaxis()->SetTitle("Entries/bin");

  hDiffT_CRT_T0Flash = tfs->make<TH1F>("hDiffT_CRT_T0Flash","hDiffT_CRT_T0Flash",5000,-20000,20000);
  hDiffT_CRT_T0Flash->GetXaxis()->SetTitle("T0Time_Flash - CRTTrack_Time (ns)");
  hDiffT_CRT_T0Flash->GetYaxis()->SetTitle("Entries/bin");

  hDiffT_T0Flash = tfs->make<TH1F>("hDiffT_T0Flash","hDiffT_T0Flash",5000,-20000,20000);
  hDiffT_T0Flash->GetXaxis()->SetTitle("T0Time - T0Time_Flash (ns)");
  hDiffT_T0Flash->GetYaxis()->SetTitle("Entries/bin");

  hGeoMatch = tfs->make<TH1F>("hGeoMatch","hGeoMatch",5000,-20000,20000);
  hGeoMatch->GetXaxis()->SetTitle("FlashTime - CRTTrack_Time (ns)");
  hGeoMatch->GetYaxis()->SetTitle("Entries/bin");

  hTrackTheta = tfs->make<TH1F>("hTrackTheta","hTrackTheta",60,0,2*3.14159);
  hTrackPhi = tfs->make<TH1F>("hTrackPhi","hTrackPhi",60,0,2*3.14159);
  hMTheta = tfs->make<TH1F>("hMTheta","hMTheta",60,0,2*3.14159);
  hMPhi = tfs->make<TH1F>("hMPhi","hMPhi",60,0,2*3.14159);
  hTime = tfs->make<TH1F>("htime","htime",200,-4000,4000);

}

void crt::T0recoCRTHitAnal::endJob()
{
  // Implementation of optional member function here.

  // Double_t norm = hFlashCountClone->GetEntries();
  // hFlashCountClone->Scale(1/norm);


}

void crt::T0recoCRTAnal::SortTrackPoints(const recob::Track& track, std::vector<TVector3>& sorted_trk)
{

  sorted_trk.clear();

  auto const&N = track.NumberTrajectoryPoints();
  auto const&start = track.LocationAtPoint(0);
  auto const&end   = track.LocationAtPoint( N - 1 );

  if (start.Y() > end.Y()){
    for (size_t i=0; i < N; i++)
      sorted_trk.push_back( track.LocationAtPoint(i) );
  }

  else {
    for (size_t i=0; i < N; i++)
      sorted_trk.push_back( track.LocationAtPoint( N - i - 1) );
  }
}

DEFINE_ART_MODULE(crt::T0recoCRTHitAnal)
