////////////////////////////////////////////////////////////////////////
// Class:       TrackDump
// Module Type: analyzer
// File:        TrackDump_module.cc
//
// Generated at Mon Jul  3 03:51:03 2017 by David Lorca Galindo using artmod
// from cetpkgsupport v1_11_00.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDAnalyzer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "canvas/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"

#include "lardataobj/RecoBase/Track.h"
#include "lardataobj/RecoBase/OpFlash.h"
#include "lardataobj/RecoBase/PFParticle.h"
#include "lardataobj/AnalysisBase/T0.h"
#include "lardataobj/AnalysisBase/CosmicTag.h"
#include "lardata/Utilities/AssociationUtil.h"

#include <artdaq-core/Data/Fragment.hh>

#include "art/Framework/Services/Optional/TFileService.h"

#include "ubobj/CRT/CRTHit.hh"
#include "ubobj/CRT/CRTTzero.hh"
#include "ubobj/CRT/CRTTrack.hh"
#include "ubcrt/CRT/CRTAuxFunctions.hh"
#include "ubobj/RawData/DAQHeaderTimeUBooNE.h"

#include "TTree.h"
#include "TH1F.h"
#include "TH2F.h"
#include "TH3S.h"
#include "TProfile.h"
#include "TCanvas.h"
#include "TF1.h"
#include "TDatime.h"
#include <iostream>
#include <stdio.h>
#include <sstream>
#include <vector>
#include <map>
#include <utility>
#include <typeinfo>
#include <TDirectory.h>
  
const int kMaxCRThits = 1000;
const int kMaxCRTtracks = 1000;
const int kMaxTPCtracks = 100;


 // namespace crt {
 //   class TrackDump;
 // }

class TrackDump : public art::EDAnalyzer {
public:
  explicit TrackDump(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  TrackDump(TrackDump const &) = delete;
  TrackDump(TrackDump &&) = delete;
  TrackDump & operator = (TrackDump const &) = delete;
  TrackDump & operator = (TrackDump &&) = delete;

  // Required functions.
  void analyze(art::Event const & e) override;
  
  // Selected optional functions.
  void beginJob() override;
  void endJob() override;

private:


  void ForGettingMap(std::vector<int>  & input_vec);
  
  void ResetVars();

  void RefineAxis(TH1F* plt, double pt);

  void CreateFebPlot(int plane, int feb_id, int ax, TH2F *&hcharge);

  void CreateStripPlot(int plane, int strip_id, int ax, TH1F *&hstrip, TCanvas*& cstrip);
  
  art::ServiceHandle<art::TFileService> tfs;
  // Declare member data here.
  
  int n_hist_generated;

  uint32_t fEvtNum; //Number of current event                       
  uint32_t frunNum;                //Run Number taken from event  
  uint32_t fsubRunNum;             //Subrun Number taken from event         
  std::string  fTrackModuleLabel;
  bool fSaveTPCTrackInfo;
  std::string  data_labeltrack_;
  std::string  data_labelhit_;
  std::string  data_label_flash_;
  std::string  data_label_DAQHeader_;
  int fHardDelay_;
  int verbose_;
  bool isData;
  bool rui_debug;
  bool save_pdf_;

  //art::TFileDirectory fTopDir;
  art::TFileDirectory dir_strip_top;
  art::TFileDirectory dir_strip_bottom;
  art::TFileDirectory dir_strip_pipe;
  art::TFileDirectory dir_strip_ft;

  art::TFileDirectory dir_feb_top;
  art::TFileDirectory dir_feb_bottom;
  art::TFileDirectory dir_feb_pipe;
  art::TFileDirectory dir_feb_ft;

  //art::InputTag opFlashTag("opflashSat");

  //quality plots

  TH2F* hplavspla;
  TH1F* hTlength;
  TH1F* hTtime;
  TH2F* hTlengthvsTime;
  TH2F* hTlengthvsTimeAbs;
  TProfile* hTlengthvsTimeAbs_prof;
  TH1F* htheta;
  TH1F* hphi;
  TH1F* hts0_ns;
  TH2F* hTvsH;

  TH2F* HitDistBot;
  TH2F* HitDistFT;
  TH2F* HitDistPipe;
  TH2F* HitDistTop;

  std::vector<int> top_febids;
  std::vector<int> bottom_febids;
  std::vector<int> ft_febids;
  std::vector<int> pipe_febids;

  std::vector<int> key_bottom { 11,12,14,17,18,19,22,23,24 }; 
  std::vector<int> key_pipe   { 15,16,20,21,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55 }; 
  std::vector<int> key_ft     { 26,27,28,29,30,31,52,56,57,58,59,60,61 }; 
  std::vector<int> key_top    { 105,106,107,108,109,111,112,113,114,115,116,117,118,119,120,121,195,123,124,125,126,127,128,129 }; //Top 122 is using FEB 195

  //std::map<int, TH1F*> hstrip_x;
  //std::map<int, TH1F*> hstrip_y;
  //std::map<int, TH1F*> hstrip_z;

  std::vector<std::vector<std::map<int, TH1F*>>> hstrip;// <plane, xoryorz, <strip_id, th1f>> 
  std::vector<std::vector<std::map<int, TCanvas*>>> cstrip;// <plane, xoryorz, <strip_id, tcanvas>> 
  //std::map<int,<std::map<int,<std::map<int, TH1F*> > > > > hstrip;// <plane, xoryorz, <strip_id, th1f>> 

  std::vector<std::vector<std::map<int, TH2F*>>> hcharge;// <plane, xoryorz, <feb_id, th1f>> 

  
//quality plots                                                                           
  TTree*       fTree;
  // run information
  int run;
  int subrun;
  int event;
  double evttime;
  // CRT hits
  int nCRThits;
  int hit_plane[kMaxCRThits];
  double hit_time_s[kMaxCRThits];
  double hit_time0[kMaxCRThits];
  double hit_time1[kMaxCRThits];
  double hit_charge[kMaxCRThits];
  double hit_posx[kMaxCRThits];
  double hit_posy[kMaxCRThits];
  double hit_posz[kMaxCRThits];
  std::vector<uint8_t> feb_id[kMaxCRThits];
  std::map< uint8_t, std::vector<std::pair<int,float> > > hit_pesmap[kMaxCRThits];

  // CRT tracks
  int nCRTtracks;
  double ct_theta[kMaxCRTtracks];
  double ct_phi[kMaxCRTtracks];
  double ct_length[kMaxCRTtracks];
  double ct_time_sec[kMaxCRTtracks];
  double ct_time0[kMaxCRTtracks];
  double ct_time1[kMaxCRTtracks];
  double ct_x1[kMaxCRTtracks];
  double ct_y1[kMaxCRTtracks];
  double ct_z1[kMaxCRTtracks];
  double ct_x2[kMaxCRTtracks];
  double ct_y2[kMaxCRTtracks];
  double ct_z2[kMaxCRTtracks];
  // TPC tracks
  int nTPCtracks;
  double trkstartx[kMaxTPCtracks];
  double trkstarty[kMaxTPCtracks];
  double trkstartz[kMaxTPCtracks];
  double trkendx[kMaxTPCtracks];
  double trkendy[kMaxTPCtracks];
  double trkendz[kMaxTPCtracks];
  double trkstartdcosx[kMaxTPCtracks];
  double trkstartdcosy[kMaxTPCtracks];
  double trkstartdcosz[kMaxTPCtracks];
  double trkenddcosx[kMaxTPCtracks];
  double trkenddcosy[kMaxTPCtracks];
  double trkenddcosz[kMaxTPCtracks];
  double trktheta[kMaxTPCtracks];
  double trkphi[kMaxTPCtracks];
  double trklen[kMaxTPCtracks];
  
};


TrackDump::TrackDump(fhicl::ParameterSet const & p)
  : EDAnalyzer(p),
    fTrackModuleLabel(p.get<std::string>("TrackModuleLabel")),
    fSaveTPCTrackInfo(p.get< bool >("SaveTPCTrackInfo", false)), 
    data_labeltrack_(p.get<std::string>("data_labeltrack")),
    data_labelhit_(p.get<std::string>("data_labelhit")),
    data_label_flash_(p.get<std::string>("data_label_flash_")),
    data_label_DAQHeader_(p.get<std::string>("data_label_DAQHeader_")),
    fHardDelay_(p.get<int>("fHardDelay",40000)),
    verbose_(p.get<int>("verbose")),
    isData(p.get<bool>("isData",false)),
    rui_debug(p.get<bool>("rui_debug",false)),
    save_pdf_(p.get<bool>("save_pdf",false)),
    //fTopDir(art::ServiceHandle<art::TFileService>()->mkdir("Strip Check", "Strip_Check")),
    dir_strip_top(art::ServiceHandle<art::TFileService>()->mkdir("top_strip")),
    dir_strip_bottom(art::ServiceHandle<art::TFileService>()->mkdir("bottom_strip")),
    dir_strip_pipe(art::ServiceHandle<art::TFileService>()->mkdir("pipe_strip")),
    dir_strip_ft(art::ServiceHandle<art::TFileService>()->mkdir("ft_strip")),
    dir_feb_top(art::ServiceHandle<art::TFileService>()->mkdir("top_feb")),
    dir_feb_bottom(art::ServiceHandle<art::TFileService>()->mkdir("bottom_feb")),
    dir_feb_pipe(art::ServiceHandle<art::TFileService>()->mkdir("pipe_feb")),
    dir_feb_ft(art::ServiceHandle<art::TFileService>()->mkdir("ft_feb"))
    // More initializers here.    
{
}

void TrackDump::analyze(art::Event const & evt)
{
  
  ResetVars();

  frunNum    = evt.run();
  fsubRunNum = evt.subRun();
  fEvtNum = evt.event();
  
  art::Timestamp evtTime = evt.time();
  auto evt_time_sec = evtTime.timeHigh();
  auto evt_time_nsec = evtTime.timeLow();

  double evt_timeGPS_sec;
  double evt_timeGPS_nsec;
  double evt_timeNTP_sec;
  double evt_timeNTP_nsec;
  double timstp_diff;

  if (isData) {
    //get DAQ Header                                                                  
    //Commentar para old swizzler, sin DAQ Header
    art::Handle< raw::DAQHeaderTimeUBooNE > rawHandle_DAQHeader;  
    evt.getByLabel(data_label_DAQHeader_, rawHandle_DAQHeader);
    
    
    //check to make sure the data we asked for is valid 
    if(!rawHandle_DAQHeader.isValid()){
      std::cout << "Run " << evt.run() << ", subrun " << evt.subRun()
		<< ", event " << evt.event() << " has zero"
		<< " DAQHeaderTimeUBooNE  " << " in with label " << data_label_DAQHeader_ << std::endl;    
      return;
    }
    
    
    raw::DAQHeaderTimeUBooNE const& my_DAQHeader(*rawHandle_DAQHeader);
    art::Timestamp evtTimeGPS = my_DAQHeader.gps_time();  
    evt_timeGPS_sec = evtTimeGPS.timeHigh();
    evt_timeGPS_nsec = (double)evtTimeGPS.timeLow();
    art::Timestamp evtTimeNTP = my_DAQHeader.ntp_time();
    evt_timeNTP_sec = evtTimeNTP.timeHigh();
    evt_timeNTP_nsec = (double)evtTimeNTP.timeLow();
    timstp_diff = std::abs(evt_timeGPS_nsec - evt_timeNTP_nsec);
    

    if(verbose_==1){
      std::cout<< "Run:  "<<frunNum << "   subRun: " <<fsubRunNum<<std::endl;
      std::cout<<"event: "<<fEvtNum <<std::endl;
      std::cout.precision(19);
      std::cout<<"  GPS time second:  "<<evt_timeGPS_sec<<std::endl;
      std::cout<<"  GPS time nano_second:  "<<evt_timeGPS_nsec<<std::endl;
      std::cout<<"  NTP time second:  "<<evt_timeNTP_sec<<std::endl;    
      std::cout<<"  NTP time nano_second:  "<<evt_timeNTP_nsec<<std::endl;
      std::cout<<"  event time second:  "<<evt_time_sec<<std::endl;
      std::cout<<"  event time nano_second:  "<<evt_time_nsec<<std::endl;
      std::cout<<"  difference between GPS and NTP:  "<<evt_timeGPS_nsec - evt_timeNTP_nsec<<" ns"<<std::endl;
      std::cout<<"  ABS difference between GPS and NTP:  "<<timstp_diff<<" ns"<<std::endl;
      
      if( (evt_time_sec==evt_timeGPS_sec) && (evt_time_nsec==evt_timeGPS_nsec))  std::cout<<" Event time type is: GPS  "<<std::endl;
      if( (evt_time_sec==evt_timeNTP_sec) && (evt_time_nsec==evt_timeNTP_nsec))  std::cout<<" Event time type is: NTP  "<<std::endl;
      //getchar();
    }
  }else{
    evt_timeGPS_sec = 0;
    evt_timeGPS_nsec = 0;
    evt_timeNTP_sec = 0;
    evt_timeNTP_nsec = 0;
    timstp_diff = std::abs(evt_timeGPS_nsec - evt_timeNTP_nsec);
  }

  if (fSaveTPCTrackInfo) {

    // get TPC Track List 
    art::Handle< std::vector<recob::Track>  > trackListHandle; 
    std::vector<art::Ptr<recob::Track> >  tracklist;
    if (evt.getByLabel(fTrackModuleLabel,trackListHandle))
      art::fill_ptr_vector(tracklist, trackListHandle);
    //check to make sure the data we asked for is valid
    if(!trackListHandle.isValid()){
      std::cout << "Run " << evt.run() << ", subrun " << evt.subRun()
		<< ", event " << evt.event() << " has zero"
		<< " tracks " << " in module " << fTrackModuleLabel << std::endl;
      std::cout << std::endl;
      return;
    }
    
    
    nTPCtracks = tracklist.size();
    if (nTPCtracks>kMaxTPCtracks) nTPCtracks=kMaxTPCtracks;
    for(int j = 0; j < nTPCtracks; j++) {
      
      TVector3 pos, dir_start, dir_end, end;              
      art::Ptr<recob::Track> ptrack(trackListHandle, j);
      const recob::Track& track = *ptrack;
      
      pos       = track.Vertex();
      dir_start = track.VertexDirection();
      dir_end   = track.EndDirection();
      end       = track.End();
      //
      trklen[j]= track.Length(); //length(track);
      trkstartx[j]=pos.X();
      trkstarty[j]=pos.Y();
      trkstartz[j]=pos.Z();
      trkendx[j]=end.X();
      trkendy[j]=end.Y();
      trkendz[j]=end.Z();
      trkstartdcosx[j]=dir_start.X();
      trkstartdcosy[j]=dir_start.Y();
      trkstartdcosz[j]=dir_start.Z();
      trkenddcosx[j]=dir_end.X();
      trkenddcosy[j]=dir_end.Y();
      trkenddcosz[j]=dir_end.Z();
      trktheta[j]=dir_start.Theta();
      trkphi[j]=dir_start.Phi();
      
    }
  }   //  if (saveTPCtrackinfo)

  /*
  
  //get Optical Flash
  art::Handle< std::vector<recob::OpFlash> > rawHandle_OpFlash;
  evt.getByLabel(data_label_flash_, rawHandle_OpFlash);
  
  std::vector<recob::OpFlash> const& OpFlashCollection(*rawHandle_OpFlash);
  
  if(verbose_==1){ 
    std::cout<<"  OpFlashCollection.size()  "<<OpFlashCollection.size()<<std::endl; 
  }  //get Optical Flash
  
  */


  //  fill tree
  run=frunNum;
  event=fEvtNum;
  subrun=fsubRunNum;
  
  //get CRTHits
  art::Handle< std::vector<crt::CRTHit> > rawHandle_hit;
  evt.getByLabel(data_labelhit_, rawHandle_hit); //
  
  //check to make sure the data we asked for is valid
  if(!rawHandle_hit.isValid()){
    std::cout << "Run " << evt.run() << ", subrun " << evt.subRun()
              << ", event " << evt.event() << " has zero"
              << " CRTHits " << " in module " << data_labelhit_ << std::endl;
    std::cout << std::endl;
    return;
  }
  std::vector<crt::CRTHit> const& CRTHitCollection(*rawHandle_hit);
  if(verbose_==1){ 
    std::cout<<"  CRTHitCollection.size()  "<<CRTHitCollection.size()<<std::endl; 
    //  getchar();   
  }    //end get CRTHits

  nCRThits = CRTHitCollection.size();
  if (rui_debug)std::cout<<"there are "<<nCRThits<<" CRT hits"<<std::endl;
  if (nCRThits>kMaxCRThits) nCRThits=kMaxCRThits;
  //Loop over all CRT hits
  for(int j = 0; j < nCRThits; j++) {
    
    //fill tree
    crt::CRTHit my_CRTHit = CRTHitCollection[j];
    hit_time_s[j] =(double)my_CRTHit.ts0_s;
    hit_time0[j]  =(double)my_CRTHit.ts0_ns - (double)evt_timeGPS_nsec;
    hit_time1[j]  =(double)my_CRTHit.ts1_ns + (double)fHardDelay_;  //  + 40000 for hardware offset;
    hit_charge[j] =my_CRTHit.peshit;
    hit_plane[j]  =my_CRTHit.plane;
    hit_posx[j]   =my_CRTHit.x_pos;
    hit_posy[j]   =my_CRTHit.y_pos;
    hit_posz[j]   =my_CRTHit.z_pos;
    feb_id[j]     =my_CRTHit.feb_id;
    hit_pesmap[j] =my_CRTHit.pesmap;
    
    if(rui_debug)std::cout<<"==============================\n"
			  <<"Start for one event "
			  <<"run "<< evt.run() 
			  <<", subrun " << evt.subRun()
			  <<", event " << evt.event()
			  <<"\n map size is now"<<hstrip[my_CRTHit.plane][0].size()
			  <<std::endl;
    // For strip comparition and 2D hit plot
    for (auto id : feb_id[j]) {
      
      //std::cout<<"feb_id["<<j<<"] has"<<feb_id[j].size()<<std::endl;
      
      std::ostringstream convert;
      convert << (int) id;
      std::string key_string = convert.str();
      int key_feb = std::stoi(key_string);
      
      if(rui_debug)std::cout<<">>>"<<"looking @ feb id of "<<key_feb<<std::endl;
      //std::cout<<"id is "<<id<<" key_string is "<<key_string<<std::endl;
      
      auto pes = hit_pesmap[j].find(id)->second;
      //auto pes = hit_pesmap[j].find(fuck)->second;
    
      //std::cout<<"hit has "<<pes.size()<<" flashes"<<std::endl;
      //for (auto each : pes) std::cout<<each.first<<" SiPM has "<<each.second<<" flashes"<<std::endl;

      std::vector<double> strip_pes;
      strip_pes.clear();
      strip_pes.resize(16);
      
      int loop_size= pes.size()-1;
      
      for (int i =0; i<loop_size; ++i){
	auto pe_this = pes[i];
	auto pe_next = pes[i+1];
	
	if (pe_this.first % 2 ==0) {
	  strip_pes[pe_this.first/2] = pe_this.second+pe_next.second;
	}
      }

      //for (auto shit : strip_pes) std::cout<<shit<<std::endl;
      
      //double pe_max   = *std::max_element(strip_pes.begin(),strip_pes.end());
      int pe_max_iter = std::distance(strip_pes.begin(), std::max_element(strip_pes.begin(), strip_pes.end()));
      
      //std::cout<<"max pe is         "<<pe_max<<std::endl;
      //std::cout<<"max pe loc is     "<<pe_max_iter<<std::endl;

      if(rui_debug) std::cout<<"max found @ strip "<<pe_max_iter<<std::endl;

      int strip_id = key_feb*100+pe_max_iter;
      
      std::string strip_name = std::to_string(strip_id);
      
      int plane = my_CRTHit.plane;
      if(rui_debug) std::cout<<"at plane "<<plane<<std::endl;
      if(rui_debug) std::cout<<"Filling histo of strip_id "<<strip_id<<std::endl;
      //std::cout<<"Start Filling Strip check plots"<<std::endl;
      
      if ( hstrip[plane][0].find(strip_id) == hstrip[plane][0].end() ) {
	std::cout<<"!!! Not Found histos of strip_id holy"<<strip_id<<std::endl;
	n_hist_generated++;
	for (int ax=0; ax<3; ++ax){
	  char ax_label[] = "_x";
	  if(ax==1) ax_label[1] = 'y';
	  if(ax==2) ax_label[1] = 'z';
	      
	  //std::cout<<"axis is "<<ax<<std::endl;
	  //Bottom
	  if (plane==0){
	    bottom_febids.emplace_back(strip_id);
	    std::string s = std::to_string(strip_id);
	    char const *id_char = s.c_str();
	    //std::cout<<"title is "<<id_char<<std::endl;

	    char * title = new char[std::strlen(id_char)+std::strlen(ax_label)+1];
	    std::strcpy(title,id_char);
	    std::strcat(title,ax_label);
	    
	    hstrip[plane][ax][strip_id]= dir_strip_bottom.make<TH1F>(title,"",1200,-1200,1200); 
	    hstrip[plane][ax][strip_id]->GetXaxis()->SetTitle("Pos[cm]");
	    hstrip[plane][ax][strip_id]->GetYaxis()->SetTitle("Entries/bin");
	  }
	  //FT
	  if (plane==1){
	    ft_febids.emplace_back(strip_id);
	    std::string s = std::to_string(strip_id);
	    char const *id_char = s.c_str();
	    //std::cout<<"title is "<<id_char<<std::endl;

	    char* title = new char[std::strlen(id_char)+std::strlen(ax_label)+1];
	    std::strcpy(title,id_char);
	    std::strcat(title,ax_label);

	    hstrip[plane][ax][strip_id]= dir_strip_ft.make<TH1F>(title,"",1200,-1200,1200); 
	    hstrip[plane][ax][strip_id]->GetXaxis()->SetTitle("Pos[cm]");
	    hstrip[plane][ax][strip_id]->GetYaxis()->SetTitle("Entries/bin");
	  }
	  //Pipe
	  if (plane==2){
	    pipe_febids.emplace_back(strip_id);
	    std::string s = std::to_string(strip_id);
	    char const *id_char = s.c_str();
	    if(rui_debug) std::cout<<"title is "<<id_char<<std::endl;

	    char * title = new char[std::strlen(id_char)+std::strlen(ax_label)+1];
	    std::strcpy(title,id_char);
	    std::strcat(title,ax_label);

	    hstrip[plane][ax][strip_id]= dir_strip_pipe.make<TH1F>(title,"",1200,-1200,1200); 
	    hstrip[plane][ax][strip_id]->GetXaxis()->SetTitle("Pos[cm]");
	    hstrip[plane][ax][strip_id]->GetYaxis()->SetTitle("Entries/bin");
	  }
	  //Top
	  if (plane==3){
	    top_febids.emplace_back(strip_id);
	    std::string s = std::to_string(strip_id);
	    char const *id_char = s.c_str();
	    if(rui_debug) std::cout<<"title is "<<id_char<<std::endl;

	    char * title = new char[std::strlen(id_char)+std::strlen(ax_label)+1];
	    std::strcpy(title,id_char);
	    std::strcat(title,ax_label);

	    hstrip[plane][ax][strip_id]= dir_strip_top.make<TH1F>(title,"",1200,-1200,1200); 
	    hstrip[plane][ax][strip_id]->GetXaxis()->SetTitle("Pos[cm]");
	    hstrip[plane][ax][strip_id]->GetYaxis()->SetTitle("Entries/bin");
	  }
	  

	  //h.GetXaxis()->GetXmax();

	  if(ax==0){
	    //RefineAxis(hstrip[plane][ax][strip_id], my_CRTHit.x_pos);
	    hstrip[plane][ax][strip_id]->Fill(my_CRTHit.x_pos);
	  }
	  if(ax==1){
	    //RefineAxis(hstrip[plane][ax][strip_id], my_CRTHit.y_pos);	  
	    hstrip[plane][ax][strip_id]->Fill(my_CRTHit.y_pos);
	  }
	  if(ax==2){
	    //RefineAxis(hstrip[plane][ax][strip_id], my_CRTHit.z_pos);
	    hstrip[plane][ax][strip_id]->Fill(my_CRTHit.z_pos);
	  }
	}
      } else {
	if(rui_debug) std::cout<<"!!!Found histos of strip_id "<<strip_id<<"\n"
			       <<"map size is "<<hstrip[plane][0].size()
			       <<std::endl;
	for (int ax=0; ax<3; ++ax){
	  /*
	    std::cout<<" my_CRTHit.x_pos "<<my_CRTHit.x_pos
		   <<" my_CRTHit.y_pos "<<my_CRTHit.y_pos
		   <<" my_CRTHit.z_pos "<<my_CRTHit.z_pos<<std::endl;
	  */
	  if(ax==0){
	    //RefineAxis(hstrip[plane][ax][strip_id], my_CRTHit.x_pos);	  
	    hstrip[plane][ax][strip_id]->Fill(my_CRTHit.x_pos);
	  }
	  if(ax==1){
	    //RefineAxis(hstrip[plane][ax][strip_id], my_CRTHit.y_pos);	  
	    hstrip[plane][ax][strip_id]->Fill(my_CRTHit.y_pos);
	  }
	  if(ax==2){
	    //RefineAxis(hstrip[plane][ax][strip_id], my_CRTHit.z_pos);	  
	    hstrip[plane][ax][strip_id]->Fill(my_CRTHit.z_pos);
	  }
	}
      }
      //fill charge vs. dist per feb
      for (int ax=0; ax<3; ++ax){
	if (ax==0) hcharge[plane][ax][key_feb]->Fill(my_CRTHit.x_pos,my_CRTHit.peshit);
	if (ax==1) hcharge[plane][ax][key_feb]->Fill(my_CRTHit.y_pos,my_CRTHit.peshit);
	if (ax==2) hcharge[plane][ax][key_feb]->Fill(my_CRTHit.z_pos,my_CRTHit.peshit);
      }
    }
    //fillhistograms
    if      (my_CRTHit.plane==0) HitDistBot ->Fill(my_CRTHit.z_pos,my_CRTHit.x_pos);
    else if (my_CRTHit.plane==1) HitDistFT  ->Fill(my_CRTHit.z_pos,my_CRTHit.y_pos);
    else if (my_CRTHit.plane==2) HitDistPipe->Fill(my_CRTHit.z_pos,my_CRTHit.y_pos);
    else if (my_CRTHit.plane==3) HitDistTop ->Fill(my_CRTHit.z_pos,my_CRTHit.x_pos);

  }

  /*
  //get CRTTracks
  art::Handle< std::vector<crt::CRTTrack> > rawHandle_track;
  evt.getByLabel(data_labeltrack_, rawHandle_track); 
  
  //check to make sure the data we asked for is valid
  if(!rawHandle_track.isValid()){
    std::cout << "Run " << evt.run() << ", subrun " << evt.subRun()
              << ", event " << evt.event() << " has zero"
              << " CRTTracks " << " in module " << data_labeltrack_ << std::endl;
    std::cout << std::endl;
    return;
  }

  std::vector<crt::CRTTrack> const& CRTTrackCollection(*rawHandle_track);
  if(verbose_==1){ 
    std::cout<<"  CRTTrackCollection.size()  "<<CRTTrackCollection.size()<<std::endl; 
    getchar();   
  }


  nCRTtracks = CRTTrackCollection.size();
  if (nCRTtracks>kMaxCRTtracks) nCRTtracks=kMaxCRTtracks;

  for(int j = 0; j <nCRTtracks; j++) {
    crt::CRTTrack my_CRTTrack = CRTTrackCollection[j];
    double temp = (my_CRTTrack.y1_pos-my_CRTTrack.y2_pos)*(my_CRTTrack.y1_pos-my_CRTTrack.y2_pos)
      +(my_CRTTrack.x1_pos-my_CRTTrack.x2_pos)*(my_CRTTrack.x1_pos-my_CRTTrack.x2_pos);
    double thetatemp =  atan2(sqrt(temp),my_CRTTrack.z1_pos-my_CRTTrack.z2_pos);
    double phitemp = atan2(my_CRTTrack.y1_pos-my_CRTTrack.y2_pos,my_CRTTrack.x1_pos-my_CRTTrack.x2_pos);
    // flip track to point downwards if needed
    if (phitemp<0) { ct_phi[j]=phitemp+3.14159; ct_theta[j]=3.14159-thetatemp;}
    else { ct_theta[j]=thetatemp;     ct_phi[j]=phitemp;}
    ct_length[j]=my_CRTTrack.length;
    ct_time_sec[j]=(double)my_CRTTrack.ts0_s;
    ct_time0[j]=(double)my_CRTTrack.ts0_ns;
    ct_time1[j]=(double)my_CRTTrack.ts1_ns;
    // ct_time0[j]=(double)my_CRTTrack.ts0_ns - (double)evt_timeGPS_nsec;
    // ct_time1[j]=(double)my_CRTTrack.ts1_ns + (double)fHardDelay_;    + 40000 for hardware offset;;
    // std::cout << my_CRTTrack.ts0_ns << " " << ct_time0[j] << std::endl;
    // std::cout << my_CRTTrack.ts1_ns << " " << ct_time1[j] << std::endl;
    ct_x1[j]=my_CRTTrack.x1_pos;
    ct_y1[j]=my_CRTTrack.y1_pos;
    ct_z1[j]=my_CRTTrack.z1_pos;
    ct_x2[j]=my_CRTTrack.x2_pos;
    ct_y2[j]=my_CRTTrack.y2_pos;
    ct_z2[j]=my_CRTTrack.z2_pos;

    //fill histograms
    hplavspla->Fill(my_CRTTrack.plane1,my_CRTTrack.plane2);
    hTlength->Fill(my_CRTTrack.length);
    double time_diff = my_CRTTrack.ts0_ns_h1-my_CRTTrack.ts0_ns_h2;
    double time_diffABS = fabs(time_diff);
    hTtime->Fill(time_diffABS);
    hTlengthvsTimeAbs->Fill(my_CRTTrack.length,time_diffABS);
    hTlengthvsTimeAbs_prof->Fill(my_CRTTrack.length,time_diffABS);
    hTlengthvsTime->Fill(my_CRTTrack.length,time_diff);
    htheta->Fill(57.30*my_CRTTrack.thetaxy);
    if (my_CRTTrack.phizy>3.14159) 
      hphi->Fill(57.30*(my_CRTTrack.phizy-3.14159));
    else    hphi->Fill(57.30*my_CRTTrack.phizy);
    hts0_ns->Fill(my_CRTTrack.ts0_ns);


  }
  */


  fTree->Fill();

  
}

void TrackDump::beginJob()
{

  n_hist_generated=0;

  top_febids.clear();
  bottom_febids.clear();
  ft_febids.clear();
  pipe_febids.clear();

  // Implementation of optional member function here.
  art::ServiceHandle<art::TFileService> tfs;
  //fTopDir = tfs->mkdir("Strip_check");
  fTree = tfs->make<TTree>("trackdump","analysis tree");
  fTree->Branch("run",&run,"run/I");
  fTree->Branch("subrun",&subrun,"subrun/I");
  fTree->Branch("event",&event,"event/I");
  fTree->Branch("evttime",&evttime,"evttime/D");
  fTree->Branch("nCRThits",&nCRThits,"nCRThits/I");
  fTree->Branch("hit_plane",hit_plane,"hit_plane[nCRThits]/I");
  fTree->Branch("hit_time_s",hit_time_s,"hit_time_s[nCRThits]/D");
  fTree->Branch("hit_time0",hit_time0,"hit_time0[nCRThits]/D");
  fTree->Branch("hit_time1",hit_time1,"hit_time1[nCRThits]/D");
  fTree->Branch("hit_charge",hit_charge,"hit_charge[nCRThits]/D");
  fTree->Branch("hit_posx",hit_posx,"hit_posx[nCRThits]/D");
  fTree->Branch("hit_posy",hit_posy,"hit_posy[nCRThits]/D");
  fTree->Branch("hit_posz",hit_posz,"hit_posz[nCRThits]/D");
  // CRT tracks
  fTree->Branch("nCRTtracks",&nCRTtracks,"nCRTtracks/I");
  fTree->Branch("ct_theta",ct_theta,"ct_theta[nCRTtracks]/D");
  fTree->Branch("ct_phi",ct_phi,"ct_phi[nCRTtracks]/D");
  fTree->Branch("ct_length",ct_length,"ct_length[nCRTtracks]/D");
  fTree->Branch("ct_time_sec",ct_time_sec,"ct_time_sec[nCRTtracks]/D");
  fTree->Branch("ct_time0",ct_time0,"ct_time0[nCRTtracks]/D");
  fTree->Branch("ct_time1",ct_time1,"ct_time1[nCRTtracks]/D");
  fTree->Branch("ct_x1",ct_x1,"ct_x1[nCRTtracks]/D");
  fTree->Branch("ct_y1",ct_y1,"ct_y1[nCRTtracks]/D");
  fTree->Branch("ct_z1",ct_z1,"ct_z1[nCRTtracks]/D");
  fTree->Branch("ct_x2",ct_x2,"ct_x2[nCRTtracks]/D");
  fTree->Branch("ct_y2",ct_y2,"ct_y2[nCRTtracks]/D");
  fTree->Branch("ct_z2",ct_z2,"ct_z2[nCRTtracks]/D");
  //TPC tracks
  if (fSaveTPCTrackInfo) {
  fTree->Branch("nTPCtracks",&nTPCtracks,"nTPCtracks/I");
  fTree->Branch("trkstartx",trkstartx,"trkstartx[nTPCtracks]/D");
  fTree->Branch("trkstarty",trkstarty,"trkstarty[nTPCtracks]/D");
  fTree->Branch("trkstartz",trkstartz,"trkstartz[nTPCtracks]/D");
  fTree->Branch("trkendx",trkendx,"trkendx[nTPCtracks]/D");
  fTree->Branch("trkendy",trkendy,"trkendy[nTPCtracks]/D");
  fTree->Branch("trkendz",trkendz,"trkendz[nTPCtracks]/D");
  fTree->Branch("trkstartdcosx",trkstartdcosx,"trkstartdcosx[nTPCtracks]/D");
  fTree->Branch("trkstartdcosy",trkstartdcosy,"trkstartdcosy[nTPCtracks]/D");
  fTree->Branch("trkstartdcosz",trkstartdcosz,"trkstartdcosz[nTPCtracks]/D");
  fTree->Branch("trkenddcosx",trkenddcosx,"trkenddcosx[nTPCtracks]/D");
  fTree->Branch("trkenddcosy",trkenddcosy,"trkenddcosy[nTPCtracks]/D");
  fTree->Branch("trkenddcosz",trkenddcosz,"trkenddcosz[nTPCtracks]/D");
  fTree->Branch("trktheta",trktheta,"trktheta[nTPCtracks]/D");
  fTree->Branch("trkphi",trkphi,"trkphi[nTPCtracks]/D");
  fTree->Branch("trklen",trklen,"trklen[nTPCtracks]/D");
  }


  hplavspla = tfs->make<TH2F>("hplavspla","PlanevsPlane",4,0,4,4,0,4);
  hplavspla->GetXaxis()->SetTitle("Plane (0=Bottom, 1=FT, 2=Pipe, 3=Top)");
  hplavspla->GetYaxis()->SetTitle("Plane (0=Bottom, 1=FT, 2=Pipe, 3=Top)");
  hplavspla->GetZaxis()->SetTitle("Entries/bin");
  hplavspla->SetOption("COLZ");

  hTvsH = tfs->make<TH2F>("hTvsH","Track_vs_Hits",500,0,500,500,0,500);
  hTvsH->GetXaxis()->SetTitle("Number of CRTHits per event");
  hTvsH->GetYaxis()->SetTitle("Number of CRTTracks per event");
  hTvsH->GetZaxis()->SetTitle("Entries/bin");
  hTvsH->SetOption("COLZ");

  hTlength = tfs->make<TH1F>("hTlength","Track_Length",1500,0,1500);
  hTlength->GetXaxis()->SetTitle("Track_Length (cm)");
  hTlength->GetYaxis()->SetTitle("Entries/bin");

  hTtime = tfs->make<TH1F>("hTtime","Track_time",120,-10,110);
  hTtime->GetXaxis()->SetTitle("Track_time (ns)");
  hTtime->GetYaxis()->SetTitle("Entries/bin");

  hTlengthvsTime = tfs->make<TH2F>("hTlengthvsTime","Track_LengthvsTime",1500,0,1500,200,-100,100);
  hTlengthvsTime->GetXaxis()->SetTitle("Track_Length (cm)");
  hTlengthvsTime->GetYaxis()->SetTitle("Track_time (ns)");
  hTlengthvsTime->GetZaxis()->SetTitle("Entries/bin");
  hTlengthvsTime->SetOption("COLZ");

  hTlengthvsTimeAbs = tfs->make<TH2F>("hTlengthvsTimeAbs","Track_LengthvsTimeAbs",1500,0,1500,110,-10,100);
  hTlengthvsTimeAbs->GetXaxis()->SetTitle("Track_Length (cm)");
  hTlengthvsTimeAbs->GetYaxis()->SetTitle("Track_time (ns)");
  hTlengthvsTimeAbs->GetZaxis()->SetTitle("Entries/bin");
  hTlengthvsTimeAbs->SetOption("COLZ");

  hTlengthvsTimeAbs_prof = tfs->make<TProfile>("hTlengthvsTimeAbs_prof","Track_LengthvsTimeAbs_prof",1500,0,1500,"s");
  hTlengthvsTimeAbs_prof->GetXaxis()->SetTitle("Track_Length (cm)");
  hTlengthvsTimeAbs_prof->GetYaxis()->SetTitle("Track_time (ns)");

  htheta = tfs->make<TH1F>("htheta","Track_theta",900,0,180);
  htheta->GetXaxis()->SetTitle("Theta_xy (º)");
  htheta->GetYaxis()->SetTitle("Entries/bin");
 
  hphi = tfs->make<TH1F>("hphi","Track_phi",900,0,180);
  hphi->GetXaxis()->SetTitle("Phi_zy (º)");
  hphi->GetYaxis()->SetTitle("Entries/bin");

  hts0_ns = tfs->make<TH1F>("hts0_ns","Track_time_ns",100000,0,1e9);
  hts0_ns->GetXaxis()->SetTitle("Track time (ns)");
  hts0_ns->GetYaxis()->SetTitle("Entries/bin");
  
  hcharge.clear();
  hcharge.resize(4);
  for (auto & each : hcharge) {
    each.clear();
    each.resize(3);
  }  
  
  hstrip.clear();
  hstrip.resize(4);
  for (auto & each : hstrip) {
    each.clear();
    each.resize(3);
  }  

  cstrip.clear();
  cstrip.resize(4);
  for (auto & each : cstrip) {
    each.clear();
    each.resize(3);
  }  

  for (int plane=0; plane<4; ++plane){
    int key_feb=0;
    //Bottom
    if (plane==0){
      for(auto feb_id : key_bottom){
	key_feb=feb_id*100;
	//Initial feb plots
	for (int ax=0; ax<3; ++ax){
	  CreateFebPlot(plane, feb_id, ax, hcharge[plane][ax][feb_id]);
	  /*
	  std::string s = std::to_string(feb_id);
	  char const *feb_id_char = s.c_str();
	  char ax_label[] = "_x";
	  if(ax==1) ax_label[1] = 'y';
	  if(ax==2) ax_label[1] = 'z';
	  char * title_charge = new char[std::strlen(feb_id_char)+std::strlen(ax_label)+1];
	  std::strcpy(title_charge,feb_id_char);
	  std::strcat(title_charge,ax_label);
	  hcharge[plane][ax][feb_id] = dir_feb_bottom.make<TH2F>(title_charge,"",100,-1200,1200,100,-1200,1200);
	  hcharge[plane][ax][feb_id]->GetXaxis()->SetTitle("Dist");
	  hcharge[plane][ax][feb_id]->GetYaxis()->SetTitle("CRT Hit Charge");
	  hcharge[plane][ax][feb_id]->GetZaxis()->SetTitle("Entries/bin");
	  hcharge[plane][ax][feb_id]->SetOption("COLZ");
	  */
	}
	//Initial strip plots
	for (int strip=0; strip<16; ++strip){
	  int strip_id=key_feb+strip;
	  bottom_febids.emplace_back(strip_id);
	  n_hist_generated++;
	  //std::string s = std::to_string(strip_id);
	  //char const *id_char = s.c_str();
	  
	  for (int ax=0; ax<3; ++ax){
	    CreateStripPlot(plane, 
			    strip_id, 
			    ax, 
			    hstrip[plane][ax][strip_id], 
			    cstrip[plane][ax][strip_id]);
	    /*
	    char ax_label[] = "_x";
	    if(ax==1) ax_label[1] = 'y';
	    if(ax==2) ax_label[1] = 'z';
	    char * title = new char[std::strlen(id_char)+std::strlen(ax_label)+1];
	    std::strcpy(title,id_char);
	    std::strcat(title,ax_label);
	    cstrip[plane][ax][strip_id]= dir_strip_bottom.make<TCanvas>(title,"",500,500); 
	    hstrip[plane][ax][strip_id]= dir_strip_bottom.make<TH1F>(title,"",1200,-1200,1200); 
	    hstrip[plane][ax][strip_id]->GetXaxis()->SetTitle("Pos[cm]");
	    hstrip[plane][ax][strip_id]->GetYaxis()->SetTitle("Entries/bin");
	    */
	  }
	}
      }
    }

    //FT
    if (plane==1){
      for(auto feb_id : key_ft){
	key_feb=feb_id*100;
	//Initial feb plots
	for (int ax=0; ax<3; ++ax){
	  CreateFebPlot(plane, 
			feb_id, 
			ax, 
			hcharge[plane][ax][feb_id]);
	}
	for (int strip=0; strip<16; ++strip){
	  int strip_id=key_feb+strip;
	  ft_febids.emplace_back(strip_id);
	  n_hist_generated++;
	  for (int ax=0; ax<3; ++ax){
	    CreateStripPlot(plane, 
			    strip_id, 
			    ax, 
			    hstrip[plane][ax][strip_id], 
			    cstrip[plane][ax][strip_id]);
	  }
	}
      }
    }
    //Pipe
    if (plane==2){
      for(auto feb_id : key_pipe){
	key_feb=feb_id*100;
	//Initial feb plots
	for (int ax=0; ax<3; ++ax){
	  CreateFebPlot(plane, feb_id, ax, hcharge[plane][ax][feb_id]);
	}
	for (int strip=0; strip<16; ++strip){
	  int strip_id=key_feb+strip;
	  pipe_febids.emplace_back(strip_id);
	  n_hist_generated++;
	  
	  for (int ax=0; ax<3; ++ax){
	    CreateStripPlot(plane, 
			    strip_id, 
			    ax, 
			    hstrip[plane][ax][strip_id], 
			    cstrip[plane][ax][strip_id]);
	  }
	}
      }
    }
    //Top
    if (plane==3){
      for(auto feb_id : key_top){
	key_feb=feb_id*100;
	//Initial feb plots
	for (int ax=0; ax<3; ++ax){
	  CreateFebPlot(plane, feb_id, ax, hcharge[plane][ax][feb_id]);
	}
	for (int strip=0; strip<16; ++strip){
	  int strip_id=key_feb+strip;
	  top_febids.emplace_back(strip_id);
	  n_hist_generated++;
	  
	  for (int ax=0; ax<3; ++ax){
	    CreateStripPlot(plane, 
			    strip_id, 
			    ax, 
			    hstrip[plane][ax][strip_id], 
			    cstrip[plane][ax][strip_id]);
	  }
	}
      }
    }
  }


  double inch =2.54; //inch in cm                                                                                                                          
  HitDistBot = tfs->make<TH2F>("hBottom","Bottom",125,-700+205*inch,-700+205*inch+125*10.89,60,-300+50.4*inch,-300+50.4*inch+60*10.89);
  HitDistBot->GetXaxis()->SetTitle("Length long the beam (cm)");
  HitDistBot->GetYaxis()->SetTitle("Length along the drift (cm)");
  HitDistBot->GetZaxis()->SetTitle("Entries/bin");
  HitDistBot->SetOption("COLZ");

  HitDistFT = tfs->make<TH2F>("hFeedthroughSide","Feedthrough Side",125,-704+205*inch,-704+205*inch+125*10.89,60,-308-19.1*inch,-308-19.1*inch+60*10.89);
  HitDistFT->GetXaxis()->SetTitle("Length along the beam (cm)");
  HitDistFT->GetYaxis()->SetTitle("Height (cm)");
  HitDistFT->GetZaxis()->SetTitle("Entries/bin");
  HitDistFT->SetOption("COLZ");

  HitDistPipe = tfs->make<TH2F>("hPipeSide","Pipe Side",125,-704+205*inch,-704+205*inch+125*10.89,60,-294-19.1*inch,-294-19.1*inch+60*10.89);
  HitDistPipe->GetXaxis()->SetTitle("Length along the beam (cm)");
  HitDistPipe->GetYaxis()->SetTitle("Height (cm)");
  HitDistPipe->GetZaxis()->SetTitle("Entries/bin");
  HitDistPipe->SetOption("COLZ");

  HitDistTop = tfs->make<TH2F>("hTop","Top",125,-701+205*inch,-701+205*inch+125*11.38,80,2-170-300+50.4*inch,2-170-300+50.4*inch+80*11.38);
  HitDistTop->GetXaxis()->SetTitle("Lenght along the beam (cm)");
  HitDistTop->GetYaxis()->SetTitle("Lenght along the drift (cm)");
  HitDistTop->GetZaxis()->SetTitle("Entries/bin");
  HitDistTop->SetOption("COLZ");

}

void TrackDump::endJob()
{
  // Implementation of optional member function here.


  for (int plane=0; plane<4; ++plane){
    int key_feb=0;
    //Bottom
    if (plane==0){
      for(auto feb_id : key_bottom){
	key_feb=feb_id*100;
	for (int strip=0; strip<16; ++strip){
	  int strip_id=key_feb+strip;
	  bottom_febids.emplace_back(strip_id);
	  std::string s = std::to_string(strip_id);
	  char const *id_char = s.c_str();
	  
	  for (int ax=0; ax<3; ++ax){
	    char ax_label[] = "_x";
	    if(ax==1) ax_label[1] = 'y';
	    if(ax==2) ax_label[1] = 'z';
	    char * title = new char[std::strlen(id_char)+std::strlen(ax_label)+1];
	    std::strcpy(title,id_char);
	    std::strcat(title,ax_label);
	    //TString title_=Form("%s.png", title);
	    cstrip[plane][ax][strip_id]->cd(); 	    
	    if (save_pdf_)hstrip[plane][ax][strip_id]->Draw(); 	    
	    if (save_pdf_)cstrip[plane][ax][strip_id]->SaveAs(Form("%s.pdf", title)); 
	  }
	}
      }
    }
    //FT
    if (plane==1){
      for(auto feb_id : key_ft){
	key_feb=feb_id*100;
	for (int strip=0; strip<16; ++strip){
	  int strip_id=key_feb+strip;
	  ft_febids.emplace_back(strip_id);
	  std::string s = std::to_string(strip_id);
	  char const *id_char = s.c_str();
	  
	  for (int ax=0; ax<3; ++ax){
	    char ax_label[] = "_x";
	    if(ax==1) ax_label[1] = 'y';
	    if(ax==2) ax_label[1] = 'z';
	    char * title = new char[std::strlen(id_char)+std::strlen(ax_label)+1];
	    std::strcpy(title,id_char);
	    std::strcat(title,ax_label);
	    //TString title_=Form("%s.png", title);
	    cstrip[plane][ax][strip_id]->cd(); 	    
	    if (save_pdf_)hstrip[plane][ax][strip_id]->Draw(); 	    
	    if (save_pdf_)cstrip[plane][ax][strip_id]->SaveAs(Form("%s.pdf", title)); 
	  }
	}
      }
    }
    //Pipe
    if (plane==2){
      for(auto feb_id : key_pipe){
	key_feb=feb_id*100;
	for (int strip=0; strip<16; ++strip){
	  int strip_id=key_feb+strip;
	  pipe_febids.emplace_back(strip_id);
	  std::string s = std::to_string(strip_id);
	  char const *id_char = s.c_str();
	  
	  for (int ax=0; ax<3; ++ax){
	    char ax_label[] = "_x";
	    if(ax==1) ax_label[1] = 'y';
	    if(ax==2) ax_label[1] = 'z';
	    char * title = new char[std::strlen(id_char)+std::strlen(ax_label)+1];
	    std::strcpy(title,id_char);
	    std::strcat(title,ax_label);
	    //TString title_=Form("%s.png", title);
	    cstrip[plane][ax][strip_id]->cd(); 	    
	    if (save_pdf_)hstrip[plane][ax][strip_id]->Draw(); 	    
	    if (save_pdf_)cstrip[plane][ax][strip_id]->SaveAs(Form("%s.pdf", title)); 
	  }
	}
      }
    }
    //Top
    if (plane==3){
      for(auto feb_id : key_top){
	key_feb=feb_id*100;
	for (int strip=0; strip<16; ++strip){
	  int strip_id=key_feb+strip;
	  top_febids.emplace_back(strip_id);
	  std::string s = std::to_string(strip_id);
	  char const *id_char = s.c_str();
	  
	  for (int ax=0; ax<3; ++ax){
	    char ax_label[] = "_x";
	    if(ax==1) ax_label[1] = 'y';
	    if(ax==2) ax_label[1] = 'z';
	    char * title = new char[std::strlen(id_char)+std::strlen(ax_label)+1];
	    std::strcpy(title,id_char);
	    std::strcat(title,ax_label);
	    //TString title_=Form("%s.png", title);
	    cstrip[plane][ax][strip_id]->cd(); 	    
	    if (save_pdf_)hstrip[plane][ax][strip_id]->Draw(); 	    
	    if (save_pdf_)cstrip[plane][ax][strip_id]->SaveAs(Form("%s.pdf", title)); 
	  }
	}
      }
    }
  }
  
  ForGettingMap(top_febids);
  ForGettingMap(bottom_febids);
  ForGettingMap(pipe_febids);
  ForGettingMap(ft_febids);

  std::cout<<"<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<,"<<"Top FebID""\n";

  /*
  for (auto each : top_febids) std::cout<<each<<std::endl;
  std::cout<<std::endl;
  
  std::cout<<"<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<,"<<"Bottom FebID""\n";
  for (auto each : bottom_febids) std::cout<<each<<std::endl;
  std::cout<<std::endl;
  
  std::cout<<"<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<,"<<"FT FebID""\n";
  for (auto each : ft_febids) std::cout<<each<<std::endl;
  std::cout<<std::endl;
  
  std::cout<<"<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<,"<<"Pipe FebID""\n";
  for (auto each : pipe_febids) std::cout<<each<<std::endl;
  std::cout<<std::endl;
  */
  std::cout<<"<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<,"<<"\n"
	   <<"Createed "<<n_hist_generated<<"/ 1168 histograms."<<std::endl;
    

  //fTree->Write();
  
}


void TrackDump::ForGettingMap(std::vector<int>  & input_vec){
  
  sort( input_vec.begin(), input_vec.end() );
  input_vec.erase( unique( input_vec.begin(), input_vec.end() ), input_vec.end() );
  std::sort (input_vec.begin(), input_vec.begin()+input_vec.size());

}

void TrackDump::RefineAxis(TH1F* h, double pt){
  
  if(rui_debug) std::cout<<"Changing plot axis"<<std::endl;
  double min = h->GetXaxis()->GetXmin();
  double max = h->GetXaxis()->GetXmax();
  
  if(rui_debug) std::cout<<"pt is "<<pt<<std::endl;

  double new_max = max > pt ? max : pt;
  double new_min = min < pt ? min : pt;
  
  if(rui_debug) std::cout<<"before min max"<<min<<" "<<max
			 <<"afterr min max"<<new_min<<" "<<new_max<<std::endl;

  h->GetXaxis()->SetRange(new_min-10, new_max+10);
  
}

void TrackDump::CreateStripPlot(int plane, int strip_id, int ax, TH1F* & hstrip, TCanvas* & cstrip){

  std::string s = std::to_string(strip_id);
  char const *id_char = s.c_str();
  char ax_label[] = "_x";
  if(ax==1) ax_label[1] = 'y';
  if(ax==2) ax_label[1] = 'z';
  char * title = new char[std::strlen(id_char)+std::strlen(ax_label)+1];
  std::strcpy(title,id_char);
  std::strcat(title,ax_label);
  if (plane==0){
    cstrip= dir_strip_bottom.make<TCanvas>(title,"",500,500); 
    hstrip= dir_strip_bottom.make<TH1F>(title,"",1200,-1200,1200); 
  }
  if (plane==1){
    cstrip= dir_strip_ft.make<TCanvas>(title,"",500,500); 
    hstrip= dir_strip_ft.make<TH1F>(title,"",1200,-1200,1200); 
  }
  if (plane==2){
    cstrip= dir_strip_pipe.make<TCanvas>(title,"",500,500); 
    hstrip= dir_strip_pipe.make<TH1F>(title,"",1200,-1200,1200); 
  }
  if (plane==3){
    cstrip= dir_strip_top.make<TCanvas>(title,"",500,500); 
    hstrip= dir_strip_top.make<TH1F>(title,"",1200,-1200,1200); 
  }
  hstrip->GetXaxis()->SetTitle("Pos[cm]");
  hstrip->GetYaxis()->SetTitle("Entries/bin");
}
void TrackDump::CreateFebPlot(int plane, int feb_id, int ax, TH2F* & hcharge){
  
  std::string s = std::to_string(feb_id);
  char const *feb_id_char = s.c_str();
  char ax_label[] = "_x";
  if(ax==1) ax_label[1] = 'y';
  if(ax==2) ax_label[1] = 'z';
  char * title_charge = new char[std::strlen(feb_id_char)+std::strlen(ax_label)+1];
  std::strcpy(title_charge,feb_id_char);
  std::strcat(title_charge,ax_label);
  if (plane==0)  hcharge = dir_feb_bottom.make<TH2F>(title_charge,"",100,-1200,1200,100,-10,1200);
  if (plane==1)  hcharge = dir_feb_ft.make<TH2F>(title_charge,"",100,-1200,1200,100,-10,1200);
  if (plane==2)  hcharge = dir_feb_pipe.make<TH2F>(title_charge,"",100,-1200,1200,100,-10,1200);
  if (plane==3)  hcharge = dir_feb_top.make<TH2F>(title_charge,"",100,-1200,1200,100,-10,1200);
  hcharge->GetXaxis()->SetTitle("Dist");
  hcharge->GetYaxis()->SetTitle("CRT Hit Charge");
  //hcharge->GetZaxis()->SetTitle("Entries/bin");
  hcharge->SetOption("COLZ");
}




void TrackDump::ResetVars()
{
  run = -99999;
  subrun = -99999;
  event = -99999;
  evttime = -99999;
  nCRThits = 0;
  
  for (int i = 0; i<kMaxCRThits; ++i){
    hit_plane[i] = -999;
    hit_time_s[i] = -99999.;
    hit_time0[i] = -99999.;
    hit_time1[i] = -99999.;
    hit_charge[i] = -99999.;
    hit_posx[i] = -99999.;
    hit_posy[i] = -99999.;
    hit_posz[i] = -99999.;
  }


  nCRTtracks=0;
  for (int j = 0; j<kMaxCRTtracks; ++j){
    ct_theta[j]=-99999.;
    ct_phi[j]=-99999.;
    ct_length[j]=-99999.;
    ct_time_sec[j]=-99999.;
    ct_time0[j]=-99999.;
    ct_time1[j]=-99999.;
    ct_x1[j]=-99999.;
    ct_y1[j]=-99999.;
    ct_z1[j]=-99999.;
    ct_x2[j]=-99999.;
    ct_y2[j]=-99999.;
    ct_z2[j]=-99999.;
  }

  if (fSaveTPCTrackInfo) {
  nTPCtracks=0;
  for (int i = 0; i<kMaxTPCtracks; ++i){
    trkstartx[i]=-9999.;
    trkstarty[i]=-9999.;
    trkstartz[i]=-9999.;
    trkendx[i]=-9999.;
    trkendy[i]=-9999.;
    trkendz[i]=-9999.;
    trkstartdcosx[i]=-9999.;
    trkstartdcosy[i]=-9999.;
    trkstartdcosz[i]=-9999.;
    trkenddcosx[i]=-9999.;
    trkenddcosy[i]=-9999.;
    trkenddcosz[i]=-9999.;
    trktheta[i]=-9999.;
    trkphi[i]=-9999.;
    trklen[i]=-9999.;
  }
  }

}
DEFINE_ART_MODULE(TrackDump)


