# A script to run the producer module: CRTSimHitProducer

#include "simulationservices_sbnd.fcl"
#include "messages_sbnd.fcl"
#include "services_sbnd.fcl"
#include "signalservices_sbnd.fcl"
#include "sam_sbnd.fcl"

#include "crtsimhitproducer.fcl"
#include "rootoutput_sbnd.fcl"

process_name: CRTSimHitProducer

services:
{
  # Load the service that manages root files for histograms.
  TFileService:           { fileName: "crtsimhitproducer_hist.root" }

  # This parameter controls the level of descriptive output from various LArSoft modules.
  message:                @local::sbnd_message_services_prod

  FileCatalogMetadata:       @local::sbnd_file_catalog_mc       # from sam_sbnd.fcl
                             @table::sbnd_services 
                             @table::sbnd_random_services       # from services_sbnd.fcl

  # This following line defines many default LArSoft resources for this job.
  SignalShapingServiceSBND: @local::sbnd_signalshapingservice  # from signalservices_sbnd.fcl

} # services

# The 'source' section tells the script to expect an input file with art::Event records.
source:
{
  module_type: RootInput

  # Number of events to analyze; "-1" means all of the events in the input
  # file. You can override this value with the "-n" option on the command line. 
  maxEvents:  -1 

}

# This is empty, because we're not writing an output file with art::Event objects.
outputs:
{
  out1:
  {
              @table::sbnd_rootoutput
    dataTier: "reconstructed"
  }
}

# The 'physics' section defines and configures some modules to do work on each event.
physics:
{
  producers:
  {
    crthit: @local::standard_crtsimhitproducer
  }

  # Schedule job step(s) for execution by defining the analysis module for this job.
  reco: [ crthit ]

  stream1: [ out1 ]

  trigger_paths: [reco]

  # "end_paths" is a keyword and contains the modules that do not modify the art::Event;
  # i.e., analyzers and output streams.
  end_paths: [ stream1 ]

}
