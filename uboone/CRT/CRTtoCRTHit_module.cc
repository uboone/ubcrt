////////////////////////////////////////////////////////////////////////
// Class:       CRTtoCRTHit
// Module Type: producer
// File:        CRTtoCRTHit_module.cc
//
// Generated at Wed Nov 15 11:06:42 2017 by David Lorca Galindo using artmod
// from cetpkgsupport v1_13_00.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDProducer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "canvas/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"

#include "bernfebdaq-core/Overlays/BernZMQFragment.hh"
#include "bernfebdaq-core/Overlays/FragmentType.hh"
#include "artdaq-core/Data/Fragment.hh"

#include "art/Framework/Services/Optional/TFileService.h"

#include <string>
#include <memory>
#include <initializer_list>

// ROOT includes                                                                                                                                                
#include "TTree.h"
#include "TFile.h"
#include <stdint.h>

#include "uboone/CRT/CRTProducts/CRTHit.hh"
#include "uboone/CRT/CRTProducts/CRTTrack.hh"
#include "uboone/CRT/CRTAuxFunctions.hh"

#include "TH1F.h"
#include "TH2F.h"
#include "TH3S.h"
#include "TProfile.h"
#include "TF1.h"
#include "TDatime.h"
#include <iostream>
#include <stdio.h>
#include <sstream>
#include <vector>
#include <map>
#include <utility>
#include <memory>

namespace crt {
  class CRTtoCRTHit;
}

class crt::CRTtoCRTHit : public art::EDProducer {
public:
  explicit CRTtoCRTHit(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  CRTtoCRTHit(CRTtoCRTHit const &) = delete;
  CRTtoCRTHit(CRTtoCRTHit &&) = delete;
  CRTtoCRTHit & operator = (CRTtoCRTHit const &) = delete;
  CRTtoCRTHit & operator = (CRTtoCRTHit &&) = delete;

  // Required functions.
  void produce(art::Event & e) override;

  // Selected optional functions.
  void beginJob() override;
  void endJob() override;

private:

  // Declare member data here.

  std::vector<crt::CRTHit> allCRTHits;

  //define here all buffer you need...


};


crt::CRTtoCRTHit::CRTtoCRTHit(fhicl::ParameterSet const & p)
// :
// Initialize member data here.
{
  // Call appropriate produces<>() functions here.
  produces< std::vector<crt::CRTHit>   >();

}

void crt::CRTtoCRTHit::beginJob()
{
  // Implementation of optional member function here.






}



void crt::CRTtoCRTHit::produce(art::Event & evt)
{
  // Implementation of required member function here.

  std::unique_ptr<std::vector<crt::CRTHit> > CRTHiteventCol(new std::vector<crt::CRTHit>); //collection of CRTHits 

  evt.put(std::move(CRTHiteventCol));

}



void crt::CRTtoCRTHit::endJob()
{
  // Implementation of optional member function here.
}

DEFINE_ART_MODULE(crt::CRTtoCRTHit)
