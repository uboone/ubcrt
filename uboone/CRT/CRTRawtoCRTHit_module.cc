////////////////////////////////////////////////////////////////////////
// Class:       CRTRawtoCRTHit
// Module Type: producer
// File:        CRTRawtoCRTHit_module.cc
//
// Generated at Mon Nov 20 03:42:55 2017 by David Lorca Galindo using artmod
// from cetpkgsupport v1_13_00.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDProducer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "canvas/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"

#include "bernfebdaq-core/Overlays/BernZMQFragment.hh"
#include "bernfebdaq-core/Overlays/FragmentType.hh"
#include "artdaq-core/Data/Fragment.hh"

#include "art/Framework/Services/Optional/TFileService.h"

#include <string>
#include <memory>
#include <initializer_list>

// ROOT includes                                                                                                                                                
#include "TTree.h"
#include "TFile.h"
#include <stdint.h>

#include "uboone/CRT/CRTProducts/CRTHit.hh"
#include "uboone/CRT/CRTProducts/CRTTrack.hh"
#include "uboone/CRT/pair_builder_debug_6msts1.h"
#include "uboone/CRT/CRTAuxFunctions.hh"

#include "TH1F.h"
#include "TH2F.h"
#include "TH3S.h"
#include "TProfile.h"
#include "TF1.h"
#include "TDatime.h"
#include <iostream>
#include <stdio.h>
#include <sstream>
#include <vector>
#include <map>
#include <utility>

#include <memory>

namespace crt {
  class CRTRawtoCRTHit;
}

class crt::CRTRawtoCRTHit : public art::EDProducer {
public:
  explicit CRTRawtoCRTHit(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  CRTRawtoCRTHit(CRTRawtoCRTHit const &) = delete;
  CRTRawtoCRTHit(CRTRawtoCRTHit &&) = delete;
  CRTRawtoCRTHit & operator = (CRTRawtoCRTHit const &) = delete;
  CRTRawtoCRTHit & operator = (CRTRawtoCRTHit &&) = delete;

  // Required functions.
  void produce(art::Event & e) override;

  // Selected optional functions.
  void beginJob() override;
  void endJob() override;

private:

  // Declare member data here.

  int verbose_;
  crt::pair_builder pairAlgo;
  std::vector<crt::CRTHit> allCRTHits;

  std::string fInputFile_;
  std::string fOutputFile_;

};


crt::CRTRawtoCRTHit::CRTRawtoCRTHit(fhicl::ParameterSet const & p)
 :
// Initialize member data here.
  verbose_(p.get<int>("verbose"))
{
  // Call appropriate produces<>() functions here.
  produces< std::vector<crt::CRTHit>   >();
  fInputFile_ = p.get<std::string>("InputFileName");
  fOutputFile_ = p.get<std::string>("OutputFileName");
}


void crt::CRTRawtoCRTHit::beginJob()
{
  // Implementation of optional member function here.
  
  //char * input;
  //char * output;
  std::cout <<"Proccessing file ..." << std::endl;
  
  //  const char * tmp1="/uboone/app/users/tmettler/crt_source/data/ProdRun20170604_001007-crt04.1.crtdaq.part";
  //const char * tmp2="/uboone/app/users/tmettler/crt_source/data/ProdRun20170604_001007-crt04.1.crtdaq.part.pairs";
  
  //  char *input = strdup(tmp1);
  //char *output = strdup(tmp2);
  const char *input = fInputFile_.c_str();
  const char *output = fOutputFile_.c_str();
  std::cout <<input<< std::endl;
  std::cout <<"and writing output "<< std::endl;
  std::cout <<output<< std::endl;  

  //  int crt::pair_builder::make_pairs(const char * filename,const char * filename_store, int run_mode_, std::vector<crt::CRT_hit>& allCRTHitstmp){
  pairAlgo.make_pairs(input, output, 3, allCRTHits);

  //  pairAlgo.find_pairs(input, output,11);
  //pairAlgo.find_pairs("/uboone/app/users/tmettler/crt_source/data/ProdRun20170604_001007-crt04.1.crtdaq.part", "/uboone/app/users/tmettler/crt_source/data/ProdRun20170604_001007-crt04.1.crtdaq.part.pairs",3);
  std::cout<<" "<<std::endl;
  std::cout << "Proccessing file ... DONE!: " << std::endl;
  std::cout<<"allCRTHits.size():  "<<allCRTHits.size()<<std::endl;
}




void crt::CRTRawtoCRTHit::produce(art::Event & evt)
{
  // Implementation of required member function here.
  
  std::unique_ptr<std::vector<crt::CRTHit> > CRTHiteventCol(new std::vector<crt::CRTHit>); //collection of CRTHits 
  
  for(std::vector<int>::size_type i = 0; i != allCRTHits.size(); i++){
    crt::CRTHit CRTHitevent = allCRTHits[i];
    CRTHiteventCol->emplace_back(CRTHitevent);
    
    if(verbose_==1){
      std::cout<<"CRTHitevent.xpos:  "<<CRTHitevent.x_pos<<std::endl;
      std::cout<<"CRTHitevent.ypos:  "<<CRTHitevent.y_pos<<std::endl;
      std::cout<<"CRTHitevent.zpos:  "<<CRTHitevent.z_pos<<std::endl;
      std::cout<<"CRTHitevent.ts0_s:  "<<CRTHitevent.ts0_s<<std::endl;
      std::cout<<"CRTHitevent.ts0_ns:  "<<CRTHitevent.ts0_ns<<std::endl;
      std::cout<<"CRTHitevent.ts1_ns:  "<<CRTHitevent.ts1_ns<<std::endl;
      getchar();
    }
  }
  
  /*
    crt::CRTHit myCRTHit_test;
    myCRTHit_test.x_pos = 10;
    myCRTHit_test.y_pos = 7;
    myCRTHit_test.z_pos = 12;
    CRTHiteventCol->emplace_back(myCRTHit_test);
  */
  
  evt.put(std::move(CRTHiteventCol));
  
  if(verbose_==1){
    std::cout<<" "<<std::endl;
    std::cout<<"allCRTHits.size():  "<<allCRTHits.size()<<std::endl;
  }
  
}



void crt::CRTRawtoCRTHit::endJob()
{
  // Implementation of optional member function here.
}

DEFINE_ART_MODULE(crt::CRTRawtoCRTHit)
