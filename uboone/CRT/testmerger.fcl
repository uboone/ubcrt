#include "services_microboone.fcl"
#include "microboone_crt_merger.fcl"
process_name: CRTMerger

source:
{
	module_type : RootInput
	maxEvents   : -1
}
services:
{
	scheduler		:	{defaultExceptions	: false			}    # Make all uncaught exceptions fatal.        
	TFileService		:	{fileName		: "testmerge.root"	}
#	TimeTracker		:	@local::microboone_time_tracker
#	MemoryTracker		:	@local::microboone_memory_tracker
#	RandomNumberGenerator	:	{}                     #ART native random number generator
#	BackTracker		:	@local::microboone_backtracker
	
	#BELOW you see a list of the common services! Uncomment the ones you need.
#	DetectorClocksService	:	@local::microboone_detectorclocks
	message			:	@local::standard_info
}
physics:
{
	producers:
	{
		### random number saver
		rns	:		{module_type: RandomNumberSaver}
		merger	:		@local::microboone_crt_merger
	}
#	analyzers:
#	{
#	}
#	filters:
#	{
#	}
	
	merge2produce	:[merger]
#	ana		:[]
	stream1		:[out1]
#	trigger_paths	:[merge2produce]
	end_paths	:[stream1]
}
outputs:
{
	out1:
	{
		module_type	: RootOutput
		fileName	: "T0Reco.root"
		dataTier	: "reco"
		compressionLevel: 1
	}
}
services.message.destinations:
{
	STDCOUT:
	{
		type:      "cout"      #tells the message service to output this destination to cout
		threshold: "WARNING"   #tells the message service that this destination applies to WARNING and higher level messages
		append:     true       #says to append all messages to the output
		categories:
		{
			ChannelFilter:
			{
				limit: 0
				reportEvery: 0
			}
			default:
			{
				limit: -1  #don't print anything at the infomsg level except the explicitly named categories
				reportEvery: 1
			}
		}
	}
}
